# Connection string set to cluster nodes in format `hostName = connectionString`.
# Important: For the local DB it is important to use hostName or alias from `host` file instead of IP addresses in order to let the service connect to the local DB in case the network adapter is unavailable, disabled, or broken.
# Important: User must have superuser permissions and for security must be unlike 'postgres' user.
[cluster]
p1 = host=localhost port=1111 dbname=test user=postgres password=postgres sslmode=prefer sslcompression=1 krbsrvname=postgres target_session_attrs=any
p2 = host=p2 port=2222 dbname=test user=postgres password=postgres sslmode=prefer sslcompression=1 krbsrvname=postgres target_session_attrs=any

[main]
# Local DB server hostname.
local_node_host_name = p1

# Path to the data directory of the local PostgreSQL server.
pg_data_path = /var/lib/postgresql/data/pgdata

# Command to remove database directories. This command is executed before cmd_pg_basebackup_command.
cmd_create_db_directories = docker exec -t p1 runuser -l postgres -c "cd /var/lib/postgresql/data && mkdir -p db_dir && chown -R postgres:postgres db_dir"

# Command to create DB directories and set its permission. This command is executed before cmd_pg_basebackup_command. In Unix operating systems the DB directories must be owned to the user which runs the PostgreSQL DB service.
cmd_remove_db_directories = docker exec -t p1 runuser -l postgres -c "rm -rf /var/lib/postgresql/data/pgdata/* && rm -rf /var/lib/postgresql/data/db_dir/*"

# Name of the replication slot which is used for WAL streaming replication. 
# You can use `SELECT  * FROM pg_replication_slots` SQL-command to check available slots on the master DB node. 
# Slot should be created on master DB node during deploy WAL replication.
replication_slot_name = __slot

# Cluster nodes polling rate.
cluster_scan_period_sec = 10

# Timeout before failover after the master node is disappeared.
timeout_to_failover_sec = 15

# Timeout before starting downgrade a master DB to standby in case of multiple master DB nodes.
timeout_to_downgrade_master_sec = 35

# Delay for the checking the replication status after pg_rewind command execution and starting of DB.
timeout_to_check_replication_status_after_start_sec = 15

# Command to check the status of network adapters. The command should return a string which contains 'up' or 'connected' in case the network is available. 
cmd_get_network_status_string = docker exec -t p1 bash -c "cat /sys/class/net/eth0/operstate"

# Status when the network  is available
cmd_success_network_status_string = up

# Command to check the status of the PostgreSQL server. The command should return a string with `is running` in case of the PostgreSQL server is running.
cmd_get_db_status_string = docker exec -t p1 runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_ctl status -D /var/lib/postgresql/data/pgdata"

# Status when the database server is running
cmd_success_db_status_string = is running

# Ð¡ommand to promote the local standby PostgreSQL DB to master.
# Important: In Unix operating systems the promote command must be invoked by the user who runs the PostgreSQL DB, usually it is `postgres` user. To perform this you can use command like `runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_ctl promote -D /var/lib/postgresql/data/pgdata"`
cmd_promote_standby_to_master = docker exec p1 runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_ctl promote -D /var/lib/postgresql/data/pgdata"

# Command for synchronizing a PostgreSQL cluster with another copy of the same cluster, after the clusters' timelines have diverged.
# This command is used to turn the master DB into standby DB in case of multiple mater DB nodes.
# Dynamic parameters that are replaced at runtime:
#   %%pg_data_path%% - path to the data directory of the local PostgreSQL Server.
#   %%master_connstr%% - connection string to the master node.
cmd_pg_rewind_command = docker exec p1 runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_rewind --target-pgdata=\"%%pg_data_path%%\" --source-server=\"%%master_connstr%%\" && touch %%pg_data_path%%/standby.signal && echo \"primary_conninfo = '%%master_connstr%%'\" >> %%pg_data_path%%/postgresql.auto.conf"

# Command for the creation of a standby node from the master node.
# This command is used to turn the master DB into standby DB in case of multiple mater DB nodes when the execution of cmd_pg_rewind_command has failed.
# Dynamic parameters that are replaced at runtime:
#   %%master_connstr%% - connection string to the master node.
#   %%slot_name%% - name of the replication slot.
cmd_pg_basebackup_command = docker exec p1 runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_basebackup -D %%pg_data_path%% -d \"%%master_connstr%%\" -X stream -c fast -R --slot=%%slot_name%%"

# Command to start local PostgreSQL server.
cmd_start_db = docker exec -t p1 runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_ctl start -o \"-p 1111\" -D /var/lib/postgresql/data/pgdata"

# Command to start local PostgreSQL server.
cmd_stop_db = docker exec -t p1 runuser -l postgres -c "/usr/lib/postgresql/12/bin/pg_ctl stop -D /var/lib/postgresql/data/pgdata"

# Address and port of the webserver which publishes `/status` and `/heartbeat` endpoints.
# To reach the webserver from another computer in the network - use hostname instead of localhost.
webserver_address = localhost
webserver_port = 9889